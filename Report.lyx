#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage[ruled,vlined]{algorithm2e}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "keywordstyle={\color{blue}\bfseries}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
ECE2019AS (Fall 2019) - Lab 2
\end_layout

\begin_layout Author
Samer Hanna 305033107
\end_layout

\begin_layout Date
Nov.
 4, 2019
\end_layout

\begin_layout Section*
0 Preliminaries
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0(a) Public Repository: https://github.com/samer1248/ECE209AS-Lab2
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0(b) No one.
 The code and report where entirely made by me.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0(c) Samer Hanna 100%
\end_layout

\begin_layout Section*
1 Robot Model
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1(a) The action space has a dimensionality of two, corresponding to the
 actions that each wheel can take.
 The robot configuration state has dimension three: x,y, and the angle.
 The operation space has dimension two: x,y since the world is 2 dimensional.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1(b) The robot state is given by 
\begin_inset Formula $[x,y,\theta]$
\end_inset

, where 
\begin_inset Formula $x,y$
\end_inset

 are the coordinates of the robots and 
\begin_inset Formula $\theta$
\end_inset

 is the angle of the robot with respect to the x-axis.
\begin_inset Newline newline
\end_inset

We consider a kinematic model of the robot.
 We assume that the motion of the robot are either rotation or linear actions.
 We don't consider a full differential drive system.
 Given the radial velocity of the wheel 
\begin_inset Formula $\omega_{wheel}$
\end_inset

, the radius of the wheel 
\begin_inset Formula $r_{wheel}$
\end_inset

, and separation between the wheels 
\begin_inset Formula $d$
\end_inset

.
 The velocity of the wheel can be defined as
\begin_inset Formula 
\[
v_{wheel}=\omega_{wheel}r_{wheel}
\]

\end_inset

The robot rotation speed, when both wheels rotate in opposite direction,
 is given as
\begin_inset Formula 
\[
\omega_{robot}=\frac{v_{wheel}}{d/2}
\]

\end_inset

and the robot linear velocity, when both wheels rotate at the same speed
 is given by
\begin_inset Formula 
\[
v_{robot}=v_{wheel}.
\]

\end_inset

Since, we are using a kinematic model, we assume that the robot always uses
 the maximum angular velocities of the wheels.
 Hence, 
\begin_inset Formula $v_{robot}$
\end_inset

 and 
\begin_inset Formula $\omega_{robot}$
\end_inset

 are both constants.
 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
2 Trajectory Planning
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2(a) Let assume that the starting point 
\begin_inset Formula $x_{i}=[x_{1},y_{1},\theta_{1}]$
\end_inset

 and the end point 
\begin_inset Formula $x_{t}=[x_{t},y_{t},\theta_{t}].$
\end_inset

The proposed metric is defined as follows
\begin_inset Formula 
\[
d(x_{i},x_{t})=\sqrt{(x_{2}-x_{1})^{2}+(y_{2}-y_{1})^{2}}+\epsilon\min(\theta_{1}-\theta_{2},\theta_{2}-\theta_{1})
\]

\end_inset

This metric favors measures the euclidean distance, and takes into consideration
 the separation in angles between the states.
 
\begin_inset Formula $\epsilon$
\end_inset

 is a empirically determined constant, which is tweaked for better exploration
 for the RRT algorithm.
 Large values of 
\begin_inset Formula $\epsilon$
\end_inset

 leads to slow exploration of the space due the focus on the orientation.
 Small values lead to unoptimal point selection since they ignore the orientatio
n.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2(b) The end-to-end trajectory is desribed by a prerotation angle 
\begin_inset Formula $\theta_{pre}$
\end_inset

, a travelled distance 
\begin_inset Formula $d$
\end_inset

, and a post rotation angle 
\begin_inset Formula $\theta_{post}$
\end_inset

as follows 
\begin_inset Formula 
\[
[\theta_{pre},d,\theta_{post}]
\]

\end_inset


\begin_inset Formula $\theta_{pre}$
\end_inset

 adjusts robot towards destination
\begin_inset Formula 
\[
\theta_{pre}=\tan^{-1}\frac{y_{2}-y_{1}}{x_{2}-x_{1}}-\theta_{1}
\]

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $d$
\end_inset

 move robot to destination
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula 
\[
d=\sqrt{(x_{2}-x_{1})^{2}+(y_{2}-y_{1})^{2}}
\]

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\theta_{post}$
\end_inset

 makes robot orientation match destination orientation
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula 
\[
\theta_{post}=\theta_{2}-\tan^{-1}\frac{y_{2}-y_{1}}{x_{2}-x_{1}}
\]

\end_inset

The time taken by each step is given by 
\begin_inset Formula 
\[
t_{pre}=\theta_{pre}/w_{robot}
\]

\end_inset


\begin_inset Formula 
\[
t_{lin}=d/v_{robot}
\]

\end_inset


\begin_inset Formula 
\[
t_{post}=\theta_{post}/w_{robot}
\]

\end_inset

such that 
\begin_inset Formula $t_{pre}+t_{lin}+t_{post}=1.$
\end_inset

 For a one second trajectory, the execution is preempted once the time exceeds
 one second.
 The preempted action having 
\begin_inset Formula $t'$
\end_inset

 time remaining until one second, would perform an action given by
\begin_inset Formula 
\[
\theta'_{pre}=\omega_{robot}t'
\]

\end_inset


\begin_inset Formula 
\[
d'=v_{robot}t'
\]

\end_inset


\begin_inset Formula 
\[
\theta'_{post}=\omega_{robot}t'
\]

\end_inset

and the following action will have time zero.
\begin_inset Newline newline
\end_inset

The constrol inputs are for prerotation are 
\begin_inset Formula $[\omega_{wheel},-\omega_{wheel}]$
\end_inset

 for a duration of 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $t_{pre}$
\end_inset

for clock wise and
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 
\begin_inset Formula $[-\omega_{wheel},\omega_{wheel}]$
\end_inset

 for coutner clockwise.
 For linear travel 
\begin_inset Formula $[\omega_{wheel},\omega_{wheel}]$
\end_inset

 for 
\begin_inset Formula $t_{lin}$
\end_inset

.
 Post-rotation is similar to pre-rotation.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2(c) We use a simple way to detect collisions.
 Let 
\begin_inset Formula $d_{robot}^{max}$
\end_inset

be the furthest point from the center of the robot and let obtacle 
\begin_inset Formula $i$
\end_inset

 be defined be defined as 
\begin_inset Formula $\{x,y|x_{1}^{(i)}<x<x_{2}^{(i)},y_{1}^{(i)}<y<y_{2}^{(i)}\}.$
\end_inset

We define the padded obstacle as 
\begin_inset Formula $\{x,y|x_{1}^{(i)}-d_{robot}^{max}<x<x_{2}^{(i)}+d_{robot}^{max},y_{1}^{(i)}-d_{robot}^{max}<y<y_{2}^{(i)}+d_{robot}^{max}\},$
\end_inset

i.e., it is an obstacle with sides padded by 
\begin_inset Formula $d_{robot}^{max}$
\end_inset

.
 The path 
\begin_inset Formula $[\theta_{pre},d,\theta_{post}]$
\end_inset

 starting from 
\begin_inset Formula $x_{i}=[x_{1},y_{1},\theta_{1}]$
\end_inset

 collides with obstacle 
\begin_inset Formula $i$
\end_inset

 if the line segment passing through 
\begin_inset Formula $[x_{1},y_{1}]$
\end_inset

 with slope 
\begin_inset Formula $\tan(\theta_{1}+\theta_{pre})$
\end_inset

 with length 
\begin_inset Formula $d$
\end_inset

 interesects the padded rectange.
 The intersection of a line segment with rectangle is implemented using
 geometrical checks available in the code.
\begin_inset Newline newline
\end_inset

This approach has the advantange of being simple.
 But, it is overly conservative.
 It guarantees that at any location along the path, the robot have the freedom
 to rotate.
 Though, this is not required and prevents the robot from passing through
 narrow opennings, which it should be able to pass.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2(d) The RRT algorithm as exists in the lecture notes is implemented using
 the previous primitves.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrt_1.png

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrt_2.png

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrt_3.png

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrt_4.png

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
3 Evaluation and Extensions
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3(a) The robot time of the previous path is 14.58 seconds.
 It is evaluated by tracking the time of each steps.
 The code execution time is 0.544 seconds.
 Measured by using python time commands.
 Note, that execution stops once path has been found.
 The execution time per step is 0.0018 seconds.
\begin_inset Newline newline
\end_inset

Some examples to show the performance of RRT are shown
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrt_ex1.png

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrt_ex2.png

\end_inset


\begin_inset Newline newline
\end_inset

The robots times are 21 and 23 seconds respectively.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3(b) Collision detection is the most time consuming operation (after plotting)
 and it accounts to about 60% of the execution time excluding plotting.
 Metric evaluation accounts for another 30%, while the remaining operations
 accounts for the rest.
 Time for olotting was excluded from all calculations.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3(c) The RRT star algorithm is implemented as exists in the lecture notes.
\begin_inset Newline newline
\end_inset

For RRT start the check for better parents is done using execution time
 and not the previously defined metric.
 The robot time of this path is 11.7 seconds, which is less than RRT (14.6
 seconds).
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename rrts.png

\end_inset


\begin_inset Newline newline
\end_inset

In terms of execution time, RRT start is also more expensive it took 43.4
 seconds for 5000 steps, making the average time of a step 0.024 seconds.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3(d) The current implementation is not robust to noise.
 Since, we might end up on a different path leading far from the target.
 A modification that will make more robust is by starting from the target
 and going backwards.
 This way any point we are would lead to the objective.
\end_layout

\end_body
\end_document
